import groovy.json.JsonOutput
def app = "awesome"
def imageSourceProject = "fantastic"
def notifySlack(text, channel, attachments) {
    def slackURL = env.SLACK_URL
    def jenkinsIcon = env.MESSAGE_ICON

    def payload = JsonOutput.toJson([text: text,
        channel: channel,
        username: "openshift",
        icon_url: jenkinsIcon,
        attachments: attachments
    ])
    sh "curl -X POST --data-urlencode \'payload=${payload}\' ${slackURL}"
}
podTemplate(
  label: "scopeo",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "quay.io/redhat-emea-ssa-team/jenkins-slave-scopeo",
      resourceRequestMemory: "512Mi",
      resourceLimitMemory: "1Gi"
    )
  ]
) {
  node('scopeo') {
    stage('Push to Quay'){
      script {
        openshift.withCluster() {
          withCredentials([usernamePassword(credentialsId: "fantastic-quay-cicd-secret", usernameVariable: "QUAY_USER", passwordVariable: "QUAY_PWD")]) {
            def srcCatalogRef = openshift.selector("istag", "awesome:latest").object().image.dockerImageReference
            def srcToken = readFile "/run/secrets/kubernetes.io/serviceaccount/token"
            sh "skopeo copy docker://${srcCatalogRef} docker://quay.io/redhat-emea-ssa-team/${app}:latest --src-creds openshift:${srcToken} --dest-creds \"$QUAY_USER:$QUAY_PWD\" --src-tls-verify=false --dest-tls-verify=false"
          }
        }
      }
      notifySlack("${app} - Image pushed to Quay for scanning. <https://quay.io/repository/redhat-emea-ssa-team/${app}?tab=tags|View image> ", env.SLACK_CHANNEL, [])
    }
  }
}
