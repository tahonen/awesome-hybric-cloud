import groovy.json.JsonOutput
def app = "awesome"
def imageSourceProject = "fantastic"
def productionProject = "fantastic-prod"
def notifySlack(text, channel, attachments) {
    def slackURL = env.SLACK_URL
    def jenkinsIcon = env.MESSAGE_ICON

    def payload = JsonOutput.toJson([text: text,
        channel: channel,
        username: "openshift",
        icon_url: jenkinsIcon,
        attachments: attachments
    ])
    sh "curl -X POST --data-urlencode \'payload=${payload}\' ${slackURL}"
}
podTemplate(
  label: "skopeo",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "quay.io/redhat-emea-ssa-team/jenkins-slave-skopeo",
      resourceRequestMemory: "512Mi",
      resourceLimitMemory: "1Gi"
    )
  ]
) {
  node('skopeo') {
    stage('Deploy to Production'){
      parallel{
        stage('Deploy to onprem cluster'){
          step{
            script {
              openshift.withCluster() {
                def srcCatalogRef = ''
                openshift.withProject( "${imageSourceProject}" ){
                  srcCatalogRef = openshift.selector("istag", "${app}:production").object().image.dockerImageReference
                }
                openshift.withProject( "${productionProject}" ){
                  withCredentials([usernamePassword(credentialsId: "fantastic-onprem-docker-push-secret", usernameVariable: "REGISTRY_USER", passwordVariable: "REGISTRY_PWD")]) {
                    def srcToken = readFile "/run/secrets/kubernetes.io/serviceaccount/token"
                    sh "skopeo copy docker://${srcCatalogRef} docker://default-route-openshift-image-registry.apps.ocp4.ocp.ninja/${productionProject}/${app}:production --src-creds openshift:${srcToken} --dest-creds openshift:$REGISTRY_PWD --src-tls-verify=false --dest-tls-verify=false"
                  }
                }
              }
            }
            notifySlack("${app} - Deployed to onprem.", env.SLACK_CHANNEL, [])
          }
        }
        stage('Deploy to US'){
          step{
            script {
              sh "echo Deploy to US"
            }
            notifySlack("${app} - Deployed to US.", env.SLACK_CHANNEL, [])
          }
        }
        stage('Deploy to APAC'){
          step{
            script {
              sh "echo Deploy to APAC"
            }
            notifySlack("${app} - Deployed to APAC. ", env.SLACK_CHANNEL, [])
          }
        }
      }
    }
  }
}
